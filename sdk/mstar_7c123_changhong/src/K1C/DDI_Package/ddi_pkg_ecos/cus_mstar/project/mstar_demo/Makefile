
################################################################################
#
# Copyright (c) 2008-2009 MStar Semiconductor, Inc.
# All rights reserved.
#
# Unless otherwise stipulated in writing, any and all information contained
# herein regardless in any format shall remain the sole proprietary of
# MStar Semiconductor Inc. and be kept in strict confidence
# ("MStar Confidential Information") by the recipient.
# Any unauthorized act including without limitation unauthorized disclosure,
# copying, use, reproduction, sale, distribution, modification, disassembling,
# reverse engineering and compiling of the contents of MStar Confidential
# Information is unlawful and strictly prohibited. MStar hereby reserves the
# rights to any and all damages, losses, costs and expenses resulting therefrom.
#
#
# Makefile used for building application.
#
# The default target (all) builds application in three formats :
#   *.rec : Image in S-record format.
#   *.bin : Image in binary format.
#   *.elf : Image in ELF format.
#   *.map : Linker generated map file.
#   *.dis : Disassembly of image.
#   *.sym : Symbols.
#
# Other targets are :
#   clean :    Deletes all files generated by makefile.
#
#
################################################################################
SHELL=/bin/bash
export

# **********************************************
# Import configure file
# **********************************************
PRJ_DIR     = $(CURDIR)
-include $(PRJ_DIR)/ddi_configuration
DDI_MAIN_DIR = $(PRJ_DIR)/../../../../../../DDI_Main
DDI_MISC_DIR = $(PRJ_DIR)/../../../../../../DDI_Misc
DDI_BSP_VER_DIR = $(PRJ_DIR)/../../platform/driver
DDI_MAIN_DEMO_DIR = $(PRJ_DIR)/../../../../../../DDI_Main/demo
include  $(DDI_MAIN_DEMO_DIR)/Makefile.demo
ifeq ($(MI_BSP),disable)
TARGET_MK=ddi_target.mk
else
-include $(PRJ_DIR)/configure_mi
TARGET_MK=mi_target.mk
endif

# **********************************************
# Directories
# **********************************************
#BSP_PRJ     = $(PRJ_DIR)/../../../project/$(CHIP)_$(OS_TYPE)
BSP_PRJ     = $(PRJ_DIR)/../../..
TRUNK_MISC  = $(PRJ_DIR)/../../../../../../DDI_Misc/cus_mstar
IMAGE_BIN   = bin/$(IMAGENAME).bin
IMAGE_ZIP   = bin/$(IMAGENAME).zip
export AUTO_GEN_PATH= $(DDI_MISC_DIR)/auto_gen
export AUTO_GEN_OUT= $(PRJ_DIR)/../../../bsp/ecos/partition/auto_gen_output
export VAR_LIST    = $(AUTO_GEN_OUT)/var_list
export TMP_APP     = $(AUTO_GEN_OUT)/application
GCC_FILTER = -D'mipsisa32'
GCC_FILTER += -EL
GCC_FILTER += -mips32
GCC_FILTER += -gdwarf-2
GCC_FILTER += -mhard-float
GCC_CFG_CC_OPTS = $(filter-out $(GCC_FILTER), $(CFG_CC_OPTS))
INCLUDE     = -I$(PRJ_DIR)
INCLUDE    += -I$(DDI_MISC_DIR)/cus_mstar/project/mstar_demo
INCLUDE    += -I$(PRJ_DIR)/include
# **********************************************
# Rules
# **********************************************
.PHONY : all library package image menuconfigMI

# Project Build
#all : check_build_toolver check_lib_gccver makedir version makeBsp mwlib makeImg print_FE_list autoGen
all : check_build_toolver check_lib_gccver check_sboot_loader_addr makedir version mwlib makeImg print_FE_list autoGen
#	@cd ../../../bsp/ecos/partition/;\
#	sh boot.sh;\
#	cd -;
	@printf "CFG_BOARD=%s \n" $(CFG_BOARD) > cfg_board.inc;
	@printf "CHIP=%s \n" $(CHIP) >> cfg_board.inc;
	@echo -e " ***************            Update files to usb_update.                ****************"
	@cp -f ../../../bsp/ecos/tftp_root/miu_setting.txt ../../../bsp/ecos/tftp_root/usb_update/Target/script/miu_setting.txt
	@cp -f ../../../bsp/ecos/tftp_root/parameters.txt ../../../bsp/ecos/tftp_root/usb_update/Target/script/parameters.txt
	@cp -f ../../../bsp/ecos/tftp_root/set_config ../../../bsp/ecos/tftp_root/usb_update/Target/script/set_config
	@rm -rf ../../../bsp/ecos/tftp_root/usb_update/Target/image/
	@mkdir ../../../bsp/ecos/tftp_root/usb_update/Target/image/
	@cp -f ../../../bsp/ecos/tftp_root/$(CHIP)_$(OS_TYPE).zip ../../../bsp/ecos/tftp_root/usb_update/Target/image/
	@cp -R ../../../bsp/ecos/tftp_root ./bin/
	@echo -e " ***************            Update Done.                               ****************"
ifeq ($(CFG_BOARD), BD_MST290C_D01A_S)
	@cp -f ../../../bsp/ecos/tftp_root/$(CHIP)_$(OS_TYPE).zip bin/$(CHIP)_$(OS_TYPE)_zip.bin
	@sh print_update_info.sh
endif

makeBsp : library package

makeImg : image

# Project tool chain version checking
ALL_LIB_SHARED  += $(shell find $(PRJ_DIR)/../../../bsp -name "*.so")
ALL_LIB_SHARED  += $(shell find $(PRJ_DIR)/../../../bsp -name "*.a")
ALL_LIB_SHARED  += $(shell find $(PRJ_DIR)/../../../cus_mstar -name "*.so")
ALL_LIB_SHARED  += $(shell find $(PRJ_DIR)/../../../cus_mstar -name "*.a")
ALL_LIB_SHARED  += $(shell find $(PRJ_DIR)/../../../ecos -name "*.so")
ALL_LIB_SHARED  += $(shell find $(PRJ_DIR)/../../../ecos -name "*.a")
ALL_LIB_SHARED  += $(shell find $(PRJ_DIR)/../../../tools/mipsisa32-elf -name "*.so")
ALL_LIB_SHARED  += $(shell find $(PRJ_DIR)/../../../tools/mipsisa32-elf -name "*.a")

check_lib_gccver:
	@echo         "### Start checking libs tool chain version $(TOOLCHAIN) $(TOOLCHAIN_VERSION) ###"
	@if [ '$(shell grep -l "(GNU) 4.3.3" $(ALL_LIB_SHARED))' ];\
		then echo "[Warning] Below libs's tool chain version is not match to $(TOOLCHAIN) $(TOOLCHAIN_VERSION) !";\
			 grep -l "(GNU) 4.3.3" $(ALL_LIB_SHARED);\
			 echo "### End checking libs tool chain version   ###";exit 99;\
		else echo "### Pass checking libs tool chain version  ###";\
	fi

check_sboot_loader_addr:
ifeq ($(MI_BSP),disable)
	@echo         "### Start checking sboot loader address ###"
	$(eval EXT_PARAM=$(CFG_BOARD))
	$(eval EXT_PARAM+=$(CFG_MEMORY_MAP))
	$(eval EXT_PARAM+=$(DDI_DEMO_BOOTLOGO))
	$(eval EXT_PARAM+=$(CFG_DDR_SIZE))
	@./check_sboot_loader_addr.sh $(EXT_PARAM) $(MBOOT_PATH) $(MMAP_PATH) || { exit 99; }
endif

log_gccver:
	@$(CC) -v > .GCCver.log 2>&1

check_build_toolver: log_gccver
	@echo         "### Start checking workspace tool chain version against $(TOOLCHAIN) $(TOOLCHAIN_VERSION) ###"
	@if [ '$(shell grep "$(TOOLCHAIN_VERSION)" .GCCver.log)' ] ;\
		then echo "### Pass checking workspace tool chain version ###" ;\
			 rm .GCCver.log ;\
		else echo "[Error] Tool chain version should be $(TOOLCHAIN) $(TOOLCHAIN_VERSION). please check it!!" ;\
			 echo "Your workspace tool chain version:" ;\
			 $(CC) -dumpversion ;\
			 echo "### End checking workspace tool chain version  ###" ;\
			 rm .GCCver.log ;exit 99;\
	fi


# Project Image Build
image :
	@$(MAKE) -f $(TARGET_MK) $(filter-out,clean,$(MAKECMDGOALS)) 2>&1 | tee make.log; exit $${PIPESTATUS[0]}

# Project Library Package
package :
	@if [ -d $(BSP_PRJ) ];\
		then $(MAKE) -s -C $(BSP_PRJ) bsp;\
	fi

# Project Library Build
library :
	@if [ -d $(BSP_PRJ) ];\
		then $(MAKE) -s -C $(BSP_PRJ);\
	fi

version:
	@echo "Generating verion information..."
	@pushd . > /dev/null;\
	cd $(DDI_MAIN_DIR);\
	./gen_main_ver.sh $(DDI_MAIN_DIR);\
	cd $(DDI_MISC_DIR);\
	./gen_misc_ver.sh;\
	cd $(DDI_BSP_VER_DIR);\
	./gen_bsp_ver.sh;\
	popd > /dev/null;

menuconfigMI :
ifeq ($(MI_BSP),enable)
	@$(MAKE) -s -f $(TARGET_MK) menuconfigMI;
endif

# Project Clean
clean :
	@$(MAKE) -s -f $(TARGET_MK) clean
	@if [ -d ../../../project/$(CHIP)_$(OS_TYPE) ];\
		then $(MAKE) -s -C $(BSP_PRJ) clean;\
	fi

mwlib:
ifeq ($(RELEASE_MW_LIB), enable)
	@echo -e " ************************************************************************"
	@echo -e " *****************         Release MSTAR_MW libs   **********************"
	@echo -e " ************************************************************************"
	@echo "$(PRJ_DIR)"
	@$(MAKE) -C $(TRUNK_MISC)/ all DDI_MAIN=enable

ifneq (,$(filter enable, $(DDI_DEMO_OPENGLES2) $(DDI_DEMO_DRM) $(DDI_DEMO_HBBTV) $(DDI_DEMO_APM) $(DDI_DEMO_QT) $(DDI_DEMO_DFB)))
	@$(MAKE) -C $(DDI_OTT_DIR)/cus_mstar/ all DDI_MAIN=enable
endif

-include depend.mk
else
	@echo -e " ************************************************************************"
	@echo -e " *****************                                 **********************"
	@echo -e " *****************    RELEASE_MW_LIB is disable    **********************"
	@echo -e " *****************      no release MSTAR_MW libs   **********************"
	@echo -e " *****************                                 **********************"
	@echo -e " ************************************************************************"
endif

setup :
	@$(MAKE) -f $(TARGET_MK) setup

makeFont:
	@rm -f $(DDI_MAIN_DIR)/zui/resource/mvf/font-$(OS_TYPE).lib
	@rm -f -r $(DDI_MAIN_DIR)/zui/resource/mvf/obj
	@$(MAKE) -f $(TARGET_MK) makeFont

# print frontend demod/tuner detection list
print_FE_list :
ifeq ($(CFG_FE_LOCAL_DETECTION_LIST),disable)
	@echo -e ""
	@echo -e "************************************************************************"
	@echo -e "****************** FE Detection List Setting ***************************"
	@echo -e "************************************************************************"
	@echo -e "<External Demod Detection List>"
	@grep -o "DEMOD_...._SCAN_DEVICE.*" $(TRUNK_MISC)/project/mstar_demo/Frontend_Detect_List.h | grep -v "DEMOD_NULL"
	@echo -e ""
	@echo -e "<Tuner Detection List>"
	@grep -o "TUNER_...._SCAN_DEVICE.*" $(TRUNK_MISC)/project/mstar_demo/Frontend_Detect_List.h | grep -v "TUNER_NULL"
	@echo -e ""
	@echo -e "Note: Above list can be adjusted in //DDI_Misc/cus_mstar/project/mstar_demo/Frontend_Detect_List.h"
	@echo -e "A README in this file can be referenced to get further information"
	@echo -e "************************************************************************"
	@echo -e "****************** END FE Detection List Setting ***********************"
	@echo -e "************************************************************************"
	@echo -e ""
else
	@echo -e ""
	@echo -e "************************************************************************"
	@echo -e "****************** FE Detection List Setting ***************************"
	@echo -e "************************************************************************"
	@echo -e "<External Demod Detection List>"
	@grep -o "DEMOD_...._SCAN_DEVICE.*" $(PRJ_DIR)/Local_Frontend_Detect_List.h | grep -v "DEMOD_NULL"
	@echo -e ""
	@echo -e "<Tuner Detection List>"
	@grep -o "TUNER_...._SCAN_DEVICE.*" $(PRJ_DIR)/Local_Frontend_Detect_List.h | grep -v "TUNER_NULL"
	@echo -e ""
	@echo -e "Note: Above list can be adjusted in Local_Frontend_Detect_List.h"
	@echo -e "A README in this file can be referenced to get further information"
	@echo -e "************************************************************************"
	@echo -e "****************** END FE Detection List Setting ***********************"
	@echo -e "************************************************************************"
	@echo -e ""
endif

prepareApp:
	echo "Prepare APP partition....."
	mkdir -p $(TMP_APP)/auto_gen

makedir:
	echo "Create autoGen folder"
	[ -d $(TMP_APP) ] || mkdir -p $(TMP_APP)

prepareFolder: prepareApp

autoGen: prepareFolder
	@echo "### Definition in config ###" > $(VAR_LIST)
	@echo CFG_BOARD=$(CFG_BOARD) >> $(VAR_LIST)
	@echo FLASH_TYPE=$(FLASH_TYPE) >> $(VAR_LIST)
	@echo FS_TYPE=$(FS_TYPE) >> $(VAR_LIST)
	@echo LINK_TYPE=$(LINK_TYPE) >> $(VAR_LIST)
	@echo OS_TYPE=$(OS_TYPE) >> $(VAR_LIST)
	@echo CHIP=$(CHIP) >> $(VAR_LIST)
	@echo LINUX_KERNEL_VERSION=$(LINUX_KERNEL_VERSION) >> $(VAR_LIST)
	@echo IMAGENAME=$(IMAGENAME) >> $(VAR_LIST)
	@echo MW_FLOW=$(MW_FLOW) >> $(VAR_LIST)
	@echo RELEASE_MW_LIB=$(RELEASE_MW_LIB) >> $(VAR_LIST)
	@echo ZRAM=$(ZRAM) >> $(VAR_LIST)
	@echo TFTP_UPDATE=$(TFTP_UPDATE) >> $(VAR_LIST)
	@echo CFG_MEMORY_MAP=$(CFG_MEMORY_MAP) >> $(VAR_LIST)
	@echo PRJ_DIR=$(PRJ_DIR) >> $(VAR_LIST)
	@echo READ_ELF=$(READ_ELF) >> $(VAR_LIST)
	@echo TOOLCHAIN=$(TOOLCHAIN) >> $(VAR_LIST)
	@echo DDI_TEE=$(DDI_TEE) >> $(VAR_LIST)
ifeq ($(MI_BSP),enable)
	@echo DDI_SECURE_UBOOT=$(MI_DRM_SUPPORT_ECC_SECURE_BOOT) >> $(VAR_LIST)
	@echo DDI_ECC_SW_OBFUSCATION=$(MI_DRM_SUPPORT_ECC_SECURE_BOOT) >> $(VAR_LIST)
else
	@echo DDI_SECURE_UBOOT=$(DDI_SECURE_UBOOT) >> $(VAR_LIST)
	@echo DDI_ECC_SW_OBFUSCATION=$(DDI_ECC_SW_OBFUSCATION) >> $(VAR_LIST)
endif
	@echo NAND_TYPE=$(NAND_TYPE) >> $(VAR_LIST)
ifeq ($(MI_BSP), enable)
	@echo MI_BSP=$(MI_BSP) >> $(VAR_LIST)
	@echo MI_WLAN=$(MI_WLAN) >> $(VAR_LIST)
	@echo MI_SYS_LOW_POWER_CONSUMPTION_IN_SD=$(MI_SYS_LOW_POWER_CONSUMPTION_IN_SD) >> $(VAR_LIST)
endif
	@echo APP_BIN=$(PRJ_DIR)/bin/$(IMAGENAME).bin >> $(VAR_LIST)
	@echo ZIP_BIN=${BSP_PRJ}/bsp/ecos/tftp_root/$(IMAGENAME).zip >> $(VAR_LIST)
	@echo PARAFILE=${BSP_PRJ}/bsp/ecos/tftp_root/parameters.txt >> $(VAR_LIST)
	@echo App_Dram_Address=$(App_Dram_Address) >> $(VAR_LIST)
	@echo App_Reset_Vector_Dram_Address=$(App_Reset_Vector_Dram_Address) >> $(VAR_LIST)
	@echo LZMA_BUF_Address=$(LZMA_BUF_Address) >> $(VAR_LIST)
	@echo USB_UPDATE_CMD=$(USB_UPDATE_CMD) >> $(VAR_LIST)
	@gcc $(INCLUDE) $(CFG_CC_DEFS) $(GCC_CFG_CC_OPTS) $(CC_DEFS) $(AUTO_GEN_PATH)/parse_MsMemory.c -o ./parse_MsMemory
	@chmod 777 ./parse_MsMemory
	@./parse_MsMemory ecos
	@cd $(DDI_MISC_DIR)/auto_gen;\
	$(SHELL) $(AUTO_GEN_PATH)/auto_gen.sh || (echo "auto_gen.sh executed fail!! $$?"; exit 1)
#	@$(SHELL) $(AUTO_GEN_PATH)/check_mmap.sh $(TARGET_PATH) $(SET_CONFIG_TYPE) $(READ_ELF) $(CFG_MEMORY_MAP) show_info || (echo "check_mmap.sh executed fail!! $$?"; exit 1)
ifneq (,$(filter enable, $(DDI_ECC_SW_OBFUSCATION) $(MI_DRM_SUPPORT_ECC_SECURE_BOOT)))
	@cp -f $(RTPM_PATH)/RT_PM.bin $(TFTP_ROOT)/NAND/.
	@cp -f $(RTPM_PATH)/RT_PM.bin $(TFTP_ROOT)/../usb_update/Target/image/.
endif
	@echo -e "\e[1;32;40m[[ Make complete ]]\e[0m "

autoGenClean:
	echo "clean AutoGen related ..."
	rm -f ./parse_MsMemory
	rm -rf $(AUTO_GEN_OUT)
