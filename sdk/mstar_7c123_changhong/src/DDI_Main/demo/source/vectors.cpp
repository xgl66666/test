//<MStar Software>
//******************************************************************************
// MStar Software
// Copyright (c) 2010 - 2012 MStar Semiconductor, Inc. All rights reserved.
// All software, firmware and related documentation herein ("MStar Software") are
// intellectual property of MStar Semiconductor, Inc. ("MStar") and protected by
// law, including, but not limited to, copyright law and international treaties.
// Any use, modification, reproduction, retransmission, or republication of all
// or part of MStar Software is expressly prohibited, unless prior written
// permission has been granted by MStar.
//
// By accessing, browsing and/or using MStar Software, you acknowledge that you
// have read, understood, and agree, to be bound by below terms ("Terms") and to
// comply with all applicable laws and regulations:
//
// 1. MStar shall retain any and all right, ownership and interest to MStar
//    Software and any modification/derivatives thereof.
//    No right, ownership, or interest to MStar Software and any
//    modification/derivatives thereof is transferred to you under Terms.
//
// 2. You understand that MStar Software might include, incorporate or be
//    supplied together with third party`s software and the use of MStar
//    Software may require additional licenses from third parties.
//    Therefore, you hereby agree it is your sole responsibility to separately
//    obtain any and all third party right and license necessary for your use of
//    such third party`s software.
//
// 3. MStar Software and any modification/derivatives thereof shall be deemed as
//    MStar`s confidential information and you agree to keep MStar`s
//    confidential information in strictest confidence and not disclose to any
//    third party.
//
// 4. MStar Software is provided on an "AS IS" basis without warranties of any
//    kind. Any warranties are hereby expressly disclaimed by MStar, including
//    without limitation, any warranties of merchantability, non-infringement of
//    intellectual property rights, fitness for a particular purpose, error free
//    and in conformity with any international standard.  You agree to waive any
//    claim against MStar for any loss, damage, cost or expense that you may
//    incur related to your use of MStar Software.
//    In no event shall MStar be liable for any direct, indirect, incidental or
//    consequential damages, including without limitation, lost of profit or
//    revenues, lost or damage of data, and unauthorized system use.
//    You agree that this Section 4 shall still apply without being affected
//    even if MStar Software has been modified by MStar in accordance with your
//    request or instruction for your use, except otherwise agreed by both
//    parties in writing.
//
// 5. If requested, MStar may from time to time provide technical supports or
//    services in relation with MStar Software to you for your use of
//    MStar Software in conjunction with your or your customer`s product
//    ("Services").
//    You understand and agree that, except otherwise agreed by both parties in
//    writing, Services are provided on an "AS IS" basis and the warranty
//    disclaimer set forth in Section 4 above shall apply.
//
// 6. Nothing contained herein shall be construed as by implication, estoppels
//    or otherwise:
//    (a) conferring any license or right to use MStar name, trademark, service
//        mark, symbol or any other identification;
//    (b) obligating MStar or any of its affiliates to furnish any person,
//        including without limitation, you and your customers, any assistance
//        of any kind whatsoever, or any information; or
//    (c) conferring any license or right under any intellectual property right.
//
// 7. These terms shall be governed by and construed in accordance with the laws
//    of Taiwan, R.O.C., excluding its conflict of law rules.
//    Any and all dispute arising out hereof or related hereto shall be finally
//    settled by arbitration referred to the Chinese Arbitration Association,
//    Taipei in accordance with the ROC Arbitration Law and the Arbitration
//    Rules of the Association by three (3) arbitrators appointed in accordance
//    with the said Rules.
//    The place of arbitration shall be in Taipei, Taiwan and the language shall
//    be English.
//    The arbitration award shall be final and binding to both parties.
//
//******************************************************************************
//<MStar Software>
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2006-2007 MStar Semiconductor, Inc.
// All rights reserved.
//
// Unless otherwise stipulated in writing, any and all information contained
// herein regardless in any format shall remain the sole proprietary of
// MStar Semiconductor Inc. and be kept in strict confidence
// (¡§MStar Confidential Information¡¨) by the recipient.
// Any unauthorized act including without limitation unauthorized disclosure,
// copying, use, reproduction, sale, distribution, modification, disassembling,
// reverse engineering and compiling of the contents of MStar Confidential
// Information is unlawful and strictly prohibited. MStar hereby reserves the
// rights to any and all damages, losses, costs and expenses resulting therefrom.
//
////////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------------------------------
///
/// @file   vectors.cpp
/// @author MStar Semiconductor Inc.
/// @brief  OEM Crypto demo code
///
/// @name TV App Command Usage
//-------------------------------------------------------------------------------------------------
#if (DEMO_DRM_TEST == 1)
#include "vectors.h"

namespace WV {

vector<OEMCrypto_UINT8> TestVectors::GetDeviceKey() const
{
    OEMCrypto_UINT8 deviceKey[] = {
        0xbf, 0x3d, 0xc5, 0x48, 0xcc, 0xdd, 0x1c, 0x71, 0xd0, 0xe2, 0xea, 0x60, 0xdc, 0x0b, 0xc9, 0x81
    };
    vector<OEMCrypto_UINT8> result;
    result.resize(sizeof(deviceKey));
    memcpy(&result[0], deviceKey, result.size());

    return result;
}

vector<OEMCrypto_UINT8> TestVectors::GetEncryptedAssetKey() const
{
    OEMCrypto_UINT8 encryptedAssetKey[] = {
        0x19, 0xd5, 0x08, 0x04, 0x11, 0xaf, 0xe5, 0x32, 0x51, 0x17, 0x8a, 0x21, 0xa1, 0xee, 0x8e, 0xe0
    };
    vector<OEMCrypto_UINT8> result;
    result.resize(sizeof(encryptedAssetKey));
    memcpy(&result[0], encryptedAssetKey, result.size());

    return result;
}

vector<OEMCrypto_UINT8> TestVectors::GetClearAssetKey() const
{
    OEMCrypto_UINT8 clearAssetKey[] = {
        0xf5, 0x6c, 0x1f, 0x52, 0xfc, 0x51, 0xac, 0x31, 0xf9, 0x04, 0xf0, 0x1d, 0x5a, 0x77, 0xa5, 0xe3
    };
    vector<OEMCrypto_UINT8> result;
    result.resize(sizeof(clearAssetKey));
    memcpy(&result[0], clearAssetKey, result.size());

    return result;
}

vector<OEMCrypto_UINT8> TestVectors::GetEncryptedEcm() const
{
    OEMCrypto_UINT8 encryptedEcm[] = {
        0xec, 0x05, 0xb4, 0x95, 0x19, 0x6a, 0x17, 0xb0, 0x74, 0x35, 0x3b, 0x23, 0x5d, 0x5f, 0x86, 0x16,
        0x4d, 0x11, 0x9b, 0xca, 0x49, 0x91, 0x5c, 0x18, 0x99, 0x80, 0x7e, 0xd8, 0x25, 0x09, 0x57, 0x37
    };
    vector<OEMCrypto_UINT8> result;
    result.resize(sizeof(encryptedEcm));
    memcpy(&result[0], encryptedEcm, result.size());

    return result;
}

OEMCrypto_UINT32 TestVectors::GetFlags() const
{
    //return 0x00003000;//not correctly
    return 0x00000300;
}

vector<OEMCrypto_UINT8> TestVectors::GetClearEcm() const
{
    OEMCrypto_UINT8 clearEcm[] = {
        0x00, 0x00, 0x03, 0x00, 0x5e, 0x89, 0x92, 0x0c, 0xb0, 0x41, 0x50, 0x43, 0x02, 0x1a, 0xa4, 0x1e,
        0x41, 0x96, 0x92, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    vector<OEMCrypto_UINT8> result;
    result.resize(sizeof(clearEcm));
    memcpy(&result[0], clearEcm, result.size());

    return result;
}

vector<OEMCrypto_UINT8> TestVectors::GetClearContentKey() const
{
    OEMCrypto_UINT8 clearContentKey[] = {
        0x5e, 0x89, 0x92, 0x0c, 0xb0, 0x41, 0x50, 0x43, 0x02, 0x1a, 0xa4, 0x1e, 0x41, 0x96, 0x92, 0x39
    };
    vector<OEMCrypto_UINT8> result;
    result.resize(sizeof(clearContentKey));
    memcpy(&result[0], clearContentKey, result.size());

    return result;
}

size_t TestVectors::GetVectorCount() const
{
	return 5;
}

// #1 Clear solitary short block
// #2 One block
// #3 Multiple blocks, non-zero IV
// #4 CTS case A
// #5 CTS case B

vector<OEMCrypto_UINT8> TestVectors::GetIV(size_t index) const
{
    OEMCrypto_UINT8 iv_1[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    OEMCrypto_UINT8 iv_2[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    OEMCrypto_UINT8 iv_3[] = {
        0x7b, 0x3b, 0x70, 0x2f, 0x03, 0x8a, 0xf8, 0x71, 0xc7, 0x2e, 0x47, 0x2a, 0xd5, 0xdc, 0xfa, 0xac
    };

    OEMCrypto_UINT8 iv_4[] = {
        0x6d, 0x70, 0x56, 0xff, 0xba, 0x55, 0x61, 0xdd, 0x06, 0x51, 0xbe, 0xa7, 0xd2, 0xe8, 0x83, 0x60
    };

    OEMCrypto_UINT8 iv_5[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    vector<OEMCrypto_UINT8> result;
    result.resize(sizeof(iv_1));

    switch (index)
    {
        case 0:
            memcpy(&result[0], iv_1, result.size());
            break;

        case 1:
            memcpy(&result[0], iv_2, result.size());
            break;

        case 2:
            memcpy(&result[0], iv_3, result.size());
            break;

        case 3:
            memcpy(&result[0], iv_4, result.size());
            break;

        case 4:
            memcpy(&result[0], iv_5, result.size());
            break;
    }

    return result;
}

vector<OEMCrypto_UINT8> TestVectors::GetEncryptedData(size_t index) const
{
    static const OEMCrypto_UINT8 encryptedData_1[] = {
        0x73, 0xab, 0x03, 0x8c, 0x3f, 0x65
    };

    static const OEMCrypto_UINT8 encryptedData_2[] = {
        0x7b, 0x3b, 0x70, 0x2f, 0x03, 0x8a, 0xf8, 0x71, 0xc7, 0x2e, 0x47, 0x2a, 0xd5, 0xdc, 0xfa, 0xac
    };

    static const OEMCrypto_UINT8 encryptedData_3[] = {
        0x06, 0x9d, 0x9c, 0xb6, 0xee, 0xcd, 0xc2, 0xc8, 0x28, 0xb2, 0x4f, 0x6c, 0x81, 0x89, 0x4c, 0x08,
        0x1b, 0x29, 0xcf, 0xd2, 0x81, 0xcb, 0xf9, 0xe5, 0x2e, 0x70, 0xc5, 0x75, 0xb0, 0x82, 0xcc, 0xd5,
        0x54, 0xcf, 0x8a, 0x3f, 0x30, 0x65, 0xc4, 0x0b, 0x33, 0xb1, 0xd0, 0x56, 0x29, 0x3e, 0x50, 0xad,
        0x8e, 0x55, 0x8a, 0xc9, 0xfe, 0x55, 0x6a, 0x10, 0x38, 0xce, 0x16, 0xc9, 0x19, 0xac, 0xdb, 0x96,
        0xf8, 0x56, 0x57, 0x54, 0x5f, 0x68, 0x9f, 0xf0, 0xe7, 0x94, 0x6f, 0xc7, 0x74, 0xfd, 0x15, 0x03,
        0x6a, 0x3b, 0xb4, 0x51, 0x03, 0xd0, 0xbf, 0xb7, 0x89, 0x63, 0xd4, 0xe4, 0xde, 0x18, 0x43, 0x0b,
        0xee, 0x53, 0x1c, 0x2a, 0xf3, 0x74, 0xa8, 0x75, 0xf5, 0x46, 0x93, 0xa0, 0x69, 0xeb, 0xb2, 0xee,
        0xd0, 0x37, 0x71, 0x15, 0xc9, 0xe5, 0xe0, 0x79, 0x0a, 0x9f, 0x45, 0xd7, 0x39, 0xa2, 0x8e, 0x73,
        0x6d, 0x70, 0x56, 0xff, 0xba, 0x55, 0x61, 0xdd, 0x06, 0x51, 0xbe, 0xa7, 0xd2, 0xe8, 0x83, 0x60
    };

    static const OEMCrypto_UINT8 encryptedData_4[] = {
        0x5f, 0x23, 0x31, 0x81, 0x22, 0x99, 0x3c, 0x0a, 0x63, 0xf9, 0x43, 0x9c, 0x98, 0xa4, 0x42, 0xad,
        0x52, 0xd5, 0xc2, 0x64, 0x1b, 0x3f, 0x81, 0x34, 0x5a, 0x0f, 0xb1, 0xbe, 0x4f, 0x18, 0x2b, 0xef,
        0x7c, 0x76, 0x44, 0x5c, 0x1b, 0xe4, 0xab, 0x9a, 0x2f, 0xf0, 0xb3, 0xc8, 0xf4, 0x24, 0xc0, 0xdc,
        0xec, 0xc7, 0xc5, 0xcf, 0x7b, 0xaf, 0xb8, 0x48, 0xbf, 0xd5, 0x24, 0x60, 0xa1, 0x2a, 0xba, 0xc9,
        0xfa, 0x5f, 0x25, 0x6b, 0x2b, 0x24, 0xc0, 0x9b, 0x80, 0xfa, 0x7b, 0xde, 0xc0, 0x39, 0x40, 0x83,
        0xb8, 0xd2, 0xc6, 0x4e, 0xd8, 0x05, 0x0a, 0x9c, 0xbd, 0x18, 0x81, 0xdb, 0x2f, 0x2c, 0x30, 0xe2,
        0x54, 0x9f, 0x7e, 0x3e, 0xef, 0xdb, 0x85, 0xbc, 0x0c, 0x85, 0xf6, 0xb7, 0xe7, 0xda, 0x91, 0xc2,
        0xae, 0xea, 0x03, 0xc9, 0x9e, 0x47
    };

    static const OEMCrypto_UINT8 encryptedData_5[] = {
        0xdd, 0x25, 0xe5, 0xbd, 0xcf, 0xe1, 0x7a, 0xaa, 0x96, 0x00, 0xc0, 0x2f, 0x45, 0xcd, 0x5d, 0x91,
        0xab, 0x66, 0x15, 0x63, 0x66, 0xb2, 0xac, 0xfe, 0xc6, 0xe5, 0x05, 0xaf, 0xf9, 0x09, 0xa4, 0x91,
        0x4d, 0x41, 0x75, 0x31, 0xa6, 0x4b, 0x61, 0x1b, 0x4a, 0xfe, 0x84, 0xaf, 0x4f, 0x0c, 0xb6, 0xda,
        0x75, 0x49, 0x2e, 0x60, 0x64, 0x63, 0x52, 0x04, 0x07, 0xe0, 0xfe, 0x6a, 0x2f, 0x65, 0x6e, 0x45,
        0x99, 0x41, 0x9a, 0x7c, 0x13, 0x7f, 0x7b, 0x77, 0x62, 0xa4, 0x6e, 0xfd, 0x5f, 0x59, 0x14, 0xa7,
        0x62, 0x70, 0xf9, 0xc6, 0x89, 0x06, 0xec, 0xf3, 0x43, 0x07, 0xca, 0xac, 0xf7, 0xda, 0x52, 0x01,
        0x7c, 0x15, 0xe7, 0x82, 0x34, 0x0d, 0x84, 0x18, 0xdd, 0xfe, 0x61, 0xdb, 0xba, 0x75, 0x42, 0x97,
        0xaf, 0xa3, 0x79, 0x14, 0x93, 0xe7, 0x69, 0xcb, 0x29, 0x41, 0x91, 0xaf, 0x7c, 0xbe, 0x18, 0x80,
        0xd7, 0x05, 0x76, 0xf3, 0xaf, 0xe6, 0xf9, 0xc2, 0x14, 0x10, 0x99, 0x25, 0x20, 0x38, 0x43, 0x12,
        0xb6, 0x2f, 0x93, 0xfa, 0xbd, 0x4f, 0x16, 0xfd, 0xa2, 0x31, 0xf9, 0x3d, 0xc2, 0x16, 0x9a, 0xf6,
        0x79, 0x6c, 0xa8, 0xb4, 0xdd, 0xf5, 0x0b, 0x52, 0x7e, 0x39, 0xe5, 0x8c, 0x23, 0x04, 0x82, 0x24,
        0x8c, 0xa3, 0xe4, 0xf0, 0x02, 0x47, 0xb9, 0xc3, 0x3e, 0xd4, 0x8b, 0xeb, 0xc4, 0xe8, 0xb2, 0x5f,
        0x8f, 0xd1, 0x27, 0x0d, 0xe9, 0x7b, 0xec, 0xf6, 0xdd, 0xb1, 0x76, 0xa8, 0x18, 0xfd, 0xed, 0x3e,
        0x24, 0xae, 0xde, 0xcd, 0x6e, 0x02, 0xe2, 0xac, 0x6a, 0xfe, 0x30, 0xea, 0xeb, 0x34, 0x81, 0xe6,
        0x80, 0x83, 0x76, 0xb5, 0xef, 0x7d, 0xe6, 0x3d, 0x25, 0x17, 0xc3, 0x77, 0xeb, 0xd8, 0xdd, 0x9b,
        0xca, 0xe1, 0x16, 0x87, 0xc3, 0x50, 0xf9, 0x12, 0x5f, 0x1e, 0x56, 0x52, 0x27, 0xc8, 0x62, 0x32,
        0xe7, 0x63, 0x14, 0x86, 0xc5, 0x9a, 0x69, 0x9e, 0xa8, 0x95, 0xc6, 0x1e, 0x56, 0x24, 0xcd, 0xeb,
        0xa3, 0x9d, 0xba, 0x21, 0xac, 0xa0, 0xb4, 0x31, 0xfc, 0x5a, 0x74, 0x6f, 0x22, 0xd5, 0xe9, 0x99,
        0xc2, 0xe2, 0x14, 0x49, 0xa2, 0x47, 0xcb
    };

	vector<OEMCrypto_UINT8> result;

    switch (index)
    {
        case 0:
        {
            result.resize(sizeof(encryptedData_1));
            memcpy(&result[0], encryptedData_1, result.size());
            break;
        }
        case 1:
        {
            result.resize(sizeof(encryptedData_2));
            memcpy(&result[0], encryptedData_2, result.size());
            break;
        }
        case 2:
        {
            result.resize(sizeof(encryptedData_3));
            memcpy(&result[0], encryptedData_3, result.size());
            break;
        }
        case 3:
        {
            result.resize(sizeof(encryptedData_4));
            memcpy(&result[0], encryptedData_4, result.size());
            break;
        }
        case 4:
        {
            result.resize(sizeof(encryptedData_5));
            memcpy(&result[0], encryptedData_5, result.size());
            break;
        }
	}

    return result;
}

vector<OEMCrypto_UINT8> TestVectors::GetClearData(size_t index) const
{
    static const OEMCrypto_UINT8 clearData_1[] = {
        0x73, 0xab, 0x03, 0x8c, 0x3f, 0x65
    };

    static const OEMCrypto_UINT8 clearData_2[] = {
        0xff, 0xf1, 0x50, 0xb0, 0x22, 0xdf, 0xfc, 0x21, 0x19, 0x48, 0xcf, 0xff, 0xff, 0xff, 0xe6, 0x19
    };

    static const OEMCrypto_UINT8 clearData_3[] = {
        0x2e, 0x46, 0x92, 0x0c, 0x46, 0xd4, 0xfe, 0x9c, 0xfe, 0xff, 0x7f, 0xcf, 0xe9, 0xf0, 0xf7, 0xe3,
        0x3f, 0x1f, 0x6f, 0xd6, 0xfc, 0x55, 0xfb, 0x4e, 0x7d, 0xf8, 0xd5, 0x7d, 0x73, 0xaa, 0xa2, 0x80,
        0xf0, 0xe1, 0x55, 0x2a, 0x1b, 0x70, 0x14, 0x0e, 0xde, 0xe8, 0xf9, 0xf5, 0x48, 0x65, 0x2e, 0xaf,
        0xba, 0xea, 0x74, 0x59, 0x50, 0x57, 0xb0, 0x63, 0xcb, 0xbd, 0x82, 0x4a, 0x4e, 0xc9, 0xfe, 0x76,
        0x17, 0x3e, 0xb2, 0xff, 0x6d, 0x72, 0x4c, 0xf2, 0x92, 0x2c, 0xda, 0xf2, 0x8c, 0x79, 0xde, 0xdb,
        0xc0, 0xb6, 0xc6, 0x1f, 0xbe, 0x5a, 0x79, 0xfb, 0x3b, 0xb5, 0xe3, 0xb7, 0x7f, 0xde, 0xd9, 0xe4,
        0x0a, 0xa6, 0xc9, 0x5f, 0xc6, 0xda, 0x95, 0x86, 0xe5, 0xa8, 0x15, 0xc6, 0xfb, 0xdb, 0x42, 0xd1,
        0xba, 0xb4, 0x27, 0x04, 0xaa, 0x63, 0x0b, 0x4d, 0xa3, 0xef, 0x66, 0x7d, 0xed, 0xb8, 0x19, 0xb0,
        0x57, 0x18, 0x71, 0xd3, 0x3d, 0x97, 0x4f, 0x7e, 0x36, 0xe8, 0x93, 0x5d, 0xe9, 0x6c, 0x71, 0xca
    };

    static const OEMCrypto_UINT8 clearData_4[] = {
        0xca, 0x7d, 0x43, 0x77, 0x8f, 0xe9, 0x85, 0x80, 0xe8, 0xae, 0xdc, 0x4a, 0xd1, 0xbb, 0xa3, 0x14,
        0x80, 0x32, 0x32, 0x2e, 0xd9, 0xeb, 0x27, 0x7a, 0x05, 0x79, 0x41, 0x85, 0x12, 0x83, 0x9c, 0x2a,
        0xd5, 0x93, 0x34, 0x15, 0x4d, 0xe8, 0x60, 0xb3, 0x6e, 0xe7, 0x0e, 0x30, 0xa6, 0x6f, 0xa2, 0x16,
        0x44, 0x04, 0xc4, 0x0d, 0xf8, 0x66, 0x6a, 0x7f, 0x6d, 0xfe, 0xff, 0x7f, 0xb7, 0xed,	0xf5, 0x5e,
        0xfc, 0x67, 0xe3, 0xed, 0xfa, 0xdf, 0x8a, 0xbf, 0x69, 0xcf, 0xbf, 0x1a, 0xaf, 0xae, 0x75, 0x54,
        0x50, 0x41, 0x45, 0x94, 0xe5, 0x10, 0x12, 0xd3, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x38
    };

    static const OEMCrypto_UINT8 clearData_5[] = {
        0xff, 0xf1, 0x50, 0xb0, 0x24, 0xff, 0xfc, 0x21, 0x1a, 0x8f, 0x69, 0xce, 0xff, 0xff, 0xff, 0x39,
        0x16, 0x62, 0xa1, 0x88, 0x82, 0x57, 0x2f, 0xa9, 0x08, 0x44, 0x45, 0xdf, 0x0f, 0x5b, 0xcf, 0x0f,
        0x6f, 0x11, 0x9d, 0xf5, 0x98, 0xe8, 0xe2, 0xe0, 0x71, 0xd0, 0xaa, 0x22, 0x35, 0xb3, 0x97, 0x5f,
        0x77, 0x5a, 0xb8, 0xaf, 0xa2, 0xe2, 0xc9, 0x5c, 0x2f, 0x1d, 0xe6, 0x6c, 0xe3, 0x8d,	0xf3, 0x85,
        0xe0, 0x4a, 0x3b, 0xf0, 0xb8, 0x06, 0x50, 0xa5, 0x31, 0x56, 0x8e, 0x39, 0xe3, 0x31, 0x5a, 0x71,
        0xdd, 0xa0, 0x29, 0x15, 0x8d, 0x33, 0x69, 0x8f, 0x60, 0xd9, 0x1c, 0x9f, 0x80, 0xdf, 0x36, 0x83,
        0x5f, 0xdb, 0xa7, 0xe2, 0xd0, 0x60, 0x25, 0x2b, 0x49, 0x15, 0xa7, 0x66, 0x8f, 0x2d, 0x17, 0x2b,
        0x53, 0x64, 0xbd, 0x87, 0x74, 0x68, 0xc6, 0x1c, 0xac, 0x6b, 0x2a, 0x54, 0x46, 0x3b, 0xef, 0x98,
        0x46, 0x50, 0x10, 0x24, 0xc4, 0xfe, 0xd7, 0x04, 0x53, 0x40, 0xe9, 0x51, 0xdd, 0x37, 0x1a, 0xa1,
        0x75, 0x9d, 0x93, 0x99, 0x75, 0x01, 0x3f, 0xc4, 0x06, 0xf4, 0x44, 0x26, 0x39, 0xf7, 0xd3, 0x1c,
        0x60, 0x0f, 0x10, 0x01, 0x79, 0x53, 0xea, 0xf2, 0x46, 0x0b, 0x26, 0x6e,	0x1c, 0x71, 0x31, 0xec,
        0x69, 0xb6, 0x88, 0x67, 0xbf, 0x26, 0x7c, 0x80, 0x2d, 0xbe, 0xde, 0xdd, 0xae, 0xa2, 0x7d, 0x38,
        0x1d, 0xde, 0x35, 0x4f, 0xa9, 0x74, 0xfd, 0xea, 0xdc, 0x52, 0x67, 0x57, 0x44, 0x63, 0x4f, 0xd4,
        0x2d, 0x17, 0xcb, 0x48, 0xa9, 0x6a, 0x0a, 0x00, 0x09, 0x58, 0x2a, 0x00, 0x4e, 0xac, 0x9d, 0x26,
        0xf6, 0xde, 0xda, 0x42, 0x11, 0x12, 0xef, 0x87, 0xbe, 0x67, 0xa7, 0xc7, 0x88, 0xce,	0xfa, 0xdd,
        0x38, 0x8e, 0x2c, 0x12, 0x1f, 0xe5, 0xa4, 0xce, 0x39, 0x4e, 0xe7, 0x38, 0x95, 0x4c, 0x42, 0x73,
        0x4d, 0x1d, 0x6a, 0xd3, 0x61, 0x41, 0x79, 0x0a, 0xcb, 0x77, 0x9b, 0x95, 0xa3, 0x22, 0x22, 0xa0,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e
    };

    vector<OEMCrypto_UINT8> result;

    switch (index)
    {
        case 0:
        {
            result.resize(sizeof(clearData_1));
            memcpy(&result[0], clearData_1, result.size());
            break;
        }
        case 1:
        {
            result.resize(sizeof(clearData_2));
            memcpy(&result[0], clearData_2, result.size());
            break;
        }
        case 2:
        {
            result.resize(sizeof(clearData_3));
            memcpy(&result[0], clearData_3, result.size());
            break;
        }
        case 3:
        {
            result.resize(sizeof(clearData_4));
            memcpy(&result[0], clearData_4, result.size());
            break;
        }
        case 4:
        {
            result.resize(sizeof(clearData_5));
            memcpy(&result[0], clearData_5, result.size());
            break;
        }
	}

    return result;
}
}
;
#endif
