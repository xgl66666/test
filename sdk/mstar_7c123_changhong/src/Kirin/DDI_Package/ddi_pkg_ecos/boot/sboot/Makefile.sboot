################################################################################
#
# Copyright (c) 2008-2010 MStar Semiconductor, Inc.
# All rights reserved.
#
# Unless otherwise stipulated in writing, any and all information contained
# herein regardless in any format shall remain the sole proprietary of
# MStar Semiconductor Inc. and be kept in strict confidence
# ("MStar Confidential Information") by the recipient.
# Any unauthorized act including without limitation unauthorized disclosure,
# copying, use, reproduction, sale, distribution, modification, disassembling,
# reverse engineering and compiling of the contents of MStar Confidential
# Information is unlawful and strictly prohibited. MStar hereby reserves the
# rights to any and all damages, losses, costs and expenses resulting therefrom.
#
################################################################################

# config first
-include .config

#0:mBoot, 1:parasoft
PARA       ?=0

aeon       :=0 # 0:aeon, 1:mips for chip.inc register map
mips4ke    :=1
mips34k    :=1
mips74k    :=1

ifeq ($(CONFIG_MSTAR_URANUS4), y)
CHIP       ?=uranus4
CPU        ?=mips34k
endif
ifeq ($(CONFIG_MSTAR_KRONUS), y)
CHIP       ?=kronus
CPU        ?=mips34k
endif
ifeq ($(CONFIG_MSTAR_KAISERIN), y)
CHIP       ?=kaiserin
CPU        ?=mips74k
endif
ifeq ($(CONFIG_MSTAR_KAISER), y)
CHIP       ?=kaiser
CPU        ?=ca9
endif
ifeq ($(CONFIG_MSTAR_KAPPA), y)
CHIP       ?=kappa
CPU        ?=mips34k
endif
ifeq ($(CONFIG_MSTAR_KELTIC), y)
CHIP       ?=keltic
CPU        ?=mips34k
endif
ifeq ($(CONFIG_MSTAR_KRITI), y)
CHIP       ?=kriti
CPU        ?=mips34k
endif
ifeq ($(CONFIG_MSTAR_KERES), y)
CHIP       ?=keres
CPU        ?=mips74k
endif
ifeq ($(CONFIG_MSTAR_KIRIN), y)
CHIP       ?=kirin
CPU        ?=mips74k
endif
ifeq ($(CONFIG_MSTAR_KRIS), y)
CHIP       ?=kris
CPU        ?=mips34k
endif
# PURPOSE can be generic, nds, bfn
PURPOSE    := generic
ifeq ($(CONFIG_LD_BOOT_FROM_OTP), y)
PURPOSE    = bf_otp
endif
ifeq ($(CONFIG_LD_BOOT_OTP_SIMULATE_ON_SPINOR), y)
PURPOSE    = bf_otp_simluate_spinor
endif

ifeq ($(PURPOSE),generic)
ifeq ($(CONFIG_RESERVED_CHUNK_HEADER),y)
PURPOSE    = generic_chunk
else
ifeq ($(CONFIG_PM),y)
PURPOSE    = generic_PM
endif
ifeq ($(CONFIG_MSTAR_STR_ENABLE),y)
PURPOSE    = generic_str
endif
endif
endif

LD_FILE    ?=ld/$(CHIP)/sboot_$(CHIP)_$(PURPOSE).ld
PM         ?=pm_$(CHIP)

# ecos:0x00000180
APP_BIN    ?=0x00000180
# ecos:0x00000220
APP_ENTRY  ?=0x00000180

# Endianess: EL only
ENDIAN     :=EL

# Optimization: 0,2,3,s
OPTIMIZE   :=s

# **********************************************
# Directories
# **********************************************
ROOT       := .

KERNELVERSION = 2.0.0
# Source files
SRCDIR     :=$(ROOT) $(ROOT)/cpu/$(ARCH)/$(CPU) $(ROOT) $(ROOT)/cpu/$(ARCH) $(ROOT)/chip/$(CHIP)
ifeq ($(PARA),0)
SRCDIR     += $(ROOT)/decompress
endif

INCDIR     :=$(ROOT) $(ROOT)/cpu/$(ARCH)/$(CPU) $(ROOT) $(ROOT)/cpu/$(ARCH) $(ROOT)/chip/$(CHIP) $(ROOT)/board/$(CHIP) $(ROOT)/include $(ROOT)/decompress

ifeq ($(CONFIG_LD_BFN_V3),y)
SRCDIR     += $(ROOT)/drivers/unfd
SRCDIR     += $(ROOT)/drivers/unfd/src/common/
SRCDIR     += $(ROOT)/drivers/unfd/src/config/
INCDIR     += $(ROOT)/drivers/unfd
INCDIR     += $(ROOT)/drivers/unfd/inc/common/
INCDIR     += $(ROOT)/drivers/unfd/inc/config/
endif


IMAGE      :=sboot

BINDIR     := bin
OBJDIR     := obj
MSCOMPDIR  := util
BIN_PATH   := $(ROOT)/$(BINDIR)
OBJ_PATH   := $(ROOT)/$(OBJDIR)

VPATH      :=$(SRCDIR)
BOOT1_INC  := include/boot1.inc
AUTOCONF_H := include/autoconf.h

UBOOT_2011_06_CHIPS := kaiser keres kris

ifeq ($(CHIP), $(filter $(CHIP),$(UBOOT_2011_06_CHIPS)))
UBOOT=u-boot-2011.06
else
UBOOT=u-boot-1.1.6
endif

ifeq ($(CHIP), $(filter $(CHIP),$(UBOOT_2011_06_CHIPS)))
UBOOT_BIN  := ../../../MBoot/$(UBOOT)/u-boot.bin
UBOOT_ELF  := ../../../MBoot/$(UBOOT)/u-boot
else
UBOOT_ELF  := ../$(UBOOT)/u-boot
UBOOT_BIN  := ../$(UBOOT)/u-boot.bin
endif
UBOOT_COMPRESSED_BIN := $(BINDIR)/u-boot.compressed.bin
ifeq ($(CHIP), $(filter $(CHIP),$(UBOOT_2011_06_CHIPS)))
UBOOT_MODULE_CONFIG_H := ../../../MBoot/$(UBOOT)/include/configs/uboot_module_config.h
UBOOT_BOARD_CONFIG_H := ../../../MBoot/$(UBOOT)/include/configs/uboot_board_config.h
UBOOT_PANEL_CONFIG_H := ../../../MBoot/$(UBOOT)/include/configs/uboot_panel_config.h
else
UBOOT_MODULE_CONFIG_H := ../$(UBOOT)/include/configs/uboot_module_config.h
UBOOT_BOARD_CONFIG_H := ../$(UBOOT)/include/configs/uboot_board_config.h
UBOOT_PANEL_CONFIG_H := ../$(UBOOT)/include/configs/uboot_panel_config.h
endif
ECOS_BIN   := $(BINDIR)/ecos.bin
ECOS_COMPRESSED_BIN := $(BINDIR)/ecos.compressed.bin

# **********************************************
# Files to be compiled
# **********************************************

SRC_S       :=$(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.s))
SRC_S_O     :=$(notdir $(patsubst %.s, %.o, $(SRC_S)))
OBJ_S       :=$(foreach file, $(SRC_S_O), $(OBJ_PATH)/$(file))
SRC_BIG_S   :=$(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.S))
SRC_BIG_S_O :=$(notdir $(patsubst %.S, %.o, $(SRC_BIG_S)))
OBJ_BIG_S   :=$(foreach file, $(SRC_BIG_S_O), $(OBJ_PATH)/$(file))

SRC_C       :=$(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.c))
SRC_C_O     :=$(notdir $(patsubst %.c, %.o, $(SRC_C)))
OBJ_C       :=$(foreach file, $(SRC_C_O), $(OBJ_PATH)/$(file))


# **********************************************
# Libraries
# **********************************************


# **********************************************
# Compiler and linker options
# **********************************************
CC_INCS    :=$(foreach dir, $(INCDIR), -I$(dir))


ifeq ($(CONFIG_MCU_MIPS32),y)
AS_OPTS    :=-$(ENDIAN) -mips32r2 -gdwarf2 -G0 -ggdb -defsym CPU=$($(CPU)) $(CC_INCS)
CC_OPTS    :=-$(ENDIAN) -mips32r2 -gdwarf-2 -ggdb -mno-abicalls -O$(OPTIMIZE) -G0 -D'CPU=$(CPU)' -D'$(CHIP)' $(CC_INCS) -include include/autoconf.h
LD_OPTS    :=-$(ENDIAN) -nostdlib -static -defsym APP_BIN=$(APP_BIN) -defsym APP_ENTRY=$(APP_ENTRY) -T ./$(LD_FILE) -Map $(BIN_PATH)/link.map
else ifeq ($(CONFIG_MCU_ARM),y)
CC_VERSION=4.5.2
STD_LIB_ROOT=$(shell $(CC) -print-sysroot)/../lib/gcc/arm-none-eabi/$(CC_VERSION)
AS_OPTS    := -gdwarf-2 -march=armv7-a -mfpu=neon -mfloat-abi=soft -ggdb -defsym CPU=$($(CPU)) $(CC_INCS)
CC_OPTS    := -gdwarf-2 -march=armv7-a -ggdb -O$(OPTIMIZE) -fomit-frame-pointer -D'CPU=$(CPU)' -D'$(CHIP)' $(CC_INCS) -include include/autoconf.h
LD_OPTS    := -nostdlib -static -defsym  APP_BIN=$(APP_BIN) -defsym  APP_ENTRY=$(APP_ENTRY) -T ./$(LD_FILE) -Map $(BIN_PATH)/link.map $(STD_LIB_ROOT)/libgcc.a
endif

# **********************************************
# Rules
# **********************************************
.PHONY : all clean sboot test mboot


# Project Build
ifeq ($(PARA),0)
all : version setup bin mboot
else
all : version setup $(OBJ_C)
endif
	@echo "  [DONE]"

ifeq ($(CONFIG_ECOS_AS_2ED_LOADER),y)
mboot:
	@echo "  [APPEND] Append eCos"
	@$(OBJCOPY) -O binary $(CONFIG_ECOS_ELF_PATH) $(ECOS_BIN)
ifeq ($(CONFIG_LD_BOOT_FROM_OTP), y)
	@rm -f $(ECOS_COMPRESSED_BIN)
	@cat $(ECOS_BIN) >> $(ECOS_COMPRESSED_BIN);
else ifeq ($(CONFIG_LD_BOOT_OTP_SIMULATE_ON_SPINOR), y)
	@rm -f $(UBOOT_COMPRESSED_BIN)
	@cat $(ECOS_BIN) >> $(ECOS_COMPRESSED_BIN);
else
ifeq ($(CONFIG_LDR_LZMA_COMPRESS),y)
	@echo "lzma compress start..."
	@$(MSCOMPDIR)/lzma e $(ECOS_BIN) $(ECOS_COMPRESSED_BIN) b$(CONFIG_DECOMPRESS_POOL_LENGTH)
endif
ifeq ($(CONFIG_LDR_NOCOMPRESS),y)
	@echo "no compress process"
	@rm -f $(ECOS_COMPRESSED_BIN)
	@cat $(ECOS_BIN) >> $(ECOS_COMPRESSED_BIN);
endif
endif
	@./app_append.py $(BINDIR) $(CONFIG_ECOS_ELF_PATH) $(ECOS_BIN) $(ECOS_COMPRESSED_BIN) ecos
else ifeq ($(CONFIG_UBOOT_AS_2ED_LOADER),y)
mboot: $(UBOOT_BIN)
	@echo "  [APPEND] Append u-boot"
ifeq ($(CONFIG_LD_BOOT_FROM_OTP), y)
	@rm -f $(UBOOT_COMPRESSED_BIN)
	@cat $(UBOOT_BIN) >> $(UBOOT_COMPRESSED_BIN);
else ifeq ($(CONFIG_LD_BOOT_OTP_SIMULATE_ON_SPINOR), y)
	@rm -f $(UBOOT_COMPRESSED_BIN)
	@cat $(UBOOT_BIN) >> $(UBOOT_COMPRESSED_BIN);
else

ifeq ($(CONFIG_LDR_LZMA_COMPRESS),y)
	@echo "lzma start ..."
	@$(MSCOMPDIR)/lzma e $(UBOOT_BIN) $(UBOOT_COMPRESSED_BIN) b$(CONFIG_DECOMPRESS_POOL_LENGTH)
endif

ifeq ($(CONFIG_LDR_NOCOMPRESS),y)
	@echo "no compress process"
	@rm -f $(UBOOT_COMPRESSED_BIN)
	@cat $(UBOOT_BIN) >> $(UBOOT_COMPRESSED_BIN);
endif


endif
	@./app_append.py $(BINDIR) $(UBOOT_ELF) $(UBOOT_BIN) $(UBOOT_COMPRESSED_BIN) uboot
ifeq ($(CONFIG_RESERVED_CHUNK_HEADER),y)
	$(Q)$(MAKE) -f Makefile.mboot
endif
else
mboot:
	@echo "  [APPEND] No second loader. Skip."
endif


$(UBOOT_BIN): $(AUTOCONF_H)
	@$(CC) -v 2>/dev/null
ifeq ($(CHIP), $(filter $(CHIP),$(UBOOT_2011_06_CHIPS)))
	@rm -rf ../../../MBoot/sboot/inc/$(CHIP)/board
	@cp -rf board/$(CHIP) ../../../MBoot/sboot/inc/$(CHIP)/board
	@rm -f ../../../MBoot/sboot/.config
	@cp -f .config ../../../MBoot/sboot/.config
	@rm -rf ../../../MBoot/sboot/include
	@cp -rf include  ../../../MBoot/sboot/include
endif
	@echo "  [GEN]     uboot_module_config.h"
	@echo "/* Automatically generated module config: don't edit */" > $(UBOOT_MODULE_CONFIG_H)
	@$(AWK) -f scripts/uboot-module-config.awk $(AUTOCONF_H) >> $(UBOOT_MODULE_CONFIG_H)
	@echo "  [GEN]     uboot_board_config.h"
	@echo "/* Automatically generated board config: don't edit */" > $(UBOOT_BOARD_CONFIG_H)
	@$(AWK) -f scripts/uboot-board-config.awk $(AUTOCONF_H) >> $(UBOOT_BOARD_CONFIG_H)
ifneq ($(CONFIG_MSTAR_MANUAL), y)
ifeq ($(CONFIG_CPU_216MHZ), y)
	@echo "#define CPU_CLOCK 216000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_288MHZ), y)
	@echo "#define CPU_CLOCK 288000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_312MHZ), y)
	@echo "#define CPU_CLOCK 312000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_348MHZ), y)
	@echo "#define CPU_CLOCK 348000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_396MHZ), y)
	@echo "#define CPU_CLOCK 396000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_384MHZ), y)
	@echo "#define CPU_CLOCK 384000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_432MHZ), y)
	@echo "#define CPU_CLOCK 432000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_456MHZ), y)
	@echo "#define CPU_CLOCK 456000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_504MHZ), y)
	@echo "#define CPU_CLOCK 504000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_552MHZ), y)
	@echo "#define CPU_CLOCK 552000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_576MHZ), y)
	@echo "#define CPU_CLOCK 576000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_600MHZ), y)
	@echo "#define CPU_CLOCK 600000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_624MHZ), y)
	@echo "#define CPU_CLOCK 624000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_648MHZ), y)
	@echo "#define CPU_CLOCK 648000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_696MHZ), y)
	@echo "#define CPU_CLOCK 696000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_720MHZ), y)
	@echo "#define CPU_CLOCK 720000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_792MHZ), y)
	@echo "#define CPU_CLOCK 792000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_840MHZ), y)
	@echo "#define CPU_CLOCK 840000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_900MHZ), y)
	@echo "#define CPU_CLOCK 900000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_984MHZ), y)
	@echo "#define CPU_CLOCK 984000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
ifeq ($(CONFIG_CPU_1008MHZ), y)
	@echo "#define CPU_CLOCK 1008000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
else
	@echo "#define CPU_CLOCK $(CONFIG_MSTAR_OTHERS)000000UL" >> $(UBOOT_BOARD_CONFIG_H)
endif
	@echo "  [GEN]     uboot_panel_config.h"
	@echo "/* Automatically generated panel type config: don't edit */" > $(UBOOT_PANEL_CONFIG_H)
	@$(AWK) -f scripts/uboot-panel-config.awk $(AUTOCONF_H) >> $(UBOOT_PANEL_CONFIG_H)
	@$(AWK) -f scripts/uboot-chip-config.awk $(AUTOCONF_H)






TODAY=$(shell date '+%Y%m%d')
NOW=$(shell date '+00%H%M%S')
version :
	@echo "  [VERSION] Update version.inc"
	@perl -w -p -i -e 's/(\s*BUILD_DATE\s*=\s+0x)[[:xdigit:]]+/$${1}$(TODAY)/g' version.inc
	@perl -w -p -i -e 's/(\s*BUILD_TIME\s*=\s+0x)[[:xdigit:]]+/$${1}$(NOW)/g' version.inc

build : $(OBJ_S) $(OBJ_BIG_S) $(OBJ_C)

# build TEST app for app.bin
test : build
	$(OBJCOPY) -O binary $(OBJ_PATH)/test.o $(BIN_PATH)/app.bin

sboot : build
	@echo "  [APP] Pack $(BIN_PATH)/app.bin"
	@$(LD) -EL -r -b binary -o $(OBJ_PATH)/app.bin.o $(BIN_PATH)/app.bin
	@if [ -e $(BIN_PATH)/pm/$(PM).bin ]; then \
		echo "  [PM] Pack  $(BIN_PATH)/pm/$(PM).bin"; \
		$(LD) -EL -r -b binary -o $(OBJ_PATH)/pm.bin.o $(BIN_PATH)/pm/$(PM).bin; \
	else \
		echo "  [PM] Pack $(BIN_PATH)/pm/null.bin"; \
		$(LD) -EL -r -b binary -o $(OBJ_PATH)/pm.bin.o $(BIN_PATH)/pm/null.bin; \
	fi;
	@echo "  [LD] $(BIN_PATH)/$(IMAGE).elf"
	@$(LD) $(LD_OPTS) -o $(BIN_PATH)/$(IMAGE).elf

$(OBJ_S) : $(OBJ_PATH)/%.o : %.s
	@echo "  [AS] $@"
	@$(AS) $(AS_OPTS) -o $@ $<

$(OBJ_BIG_S) : $(OBJ_PATH)/%.o : %.S
	@echo "  [CC] $@"
	@$(CC) $(CC_OPTS) -o $@ -c $<

$(OBJ_C) : $(OBJ_PATH)/%.o : %.c
	@echo "  [CC] $@"
	@$(CC) $(CC_OPTS) -o $@ -c $<


# Project Setup
setup :
	-@mkdir -p $(OBJ_PATH) 2> /dev/null
	-@mkdir -p $(BIN_PATH) 2> /dev/null

bin : sboot
	@echo "  [OBJCOPY] $(BIN_PATH)/$(IMAGE).elf -> $(BIN_PATH)/flash.bin"
	@$(OBJCOPY) -O binary $(BIN_PATH)/$(IMAGE).elf $(BIN_PATH)/flash.bin -R .dummy


# Project Clean
clean :
	@echo "  [CLEAN] $(IMAGE) project..."
	@rm -f $(OBJ_PATH)/*.o
	@rm -f $(BIN_PATH)/link.map
	@rm -f $(BIN_PATH)/$(IMAGE).*
	@rm -f $(BIN_PATH)/flash.bin
	@rm -f $(UBOOT_BIN)
	@rm -f $(UBOOT_COMPRESSED_BIN)
	@rm -f $(BIN_PATH)/flash_with_uboot.bin
	@rm -f $(ECOS_BIN)
	@rm -f $(ECOS_COMPRESSED_BIN)
	@rm -f $(BIN_PATH)/flash_with_ecos.bin
	@rm -f $(BIN_PATH)/bfn_miu.bin
	@rm -f $(BIN_PATH)/bfn_loader.bin
	@rm -f $(BIN_PATH)/bfn_app.bin
ifeq ($(CHIP), $(filter $(CHIP),$(UBOOT_2011_06_CHIPS)))
	$(Q)make -C ../../../MBoot/$(UBOOT) distclean
	$(Q)make -f Makefile.mboot binaclean
endif

