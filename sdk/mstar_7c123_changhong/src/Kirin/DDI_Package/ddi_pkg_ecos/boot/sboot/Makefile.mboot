################################################################################
#
# Copyright (c) 2008-2010 MStar Semiconductor, Inc.
# All rights reserved.
#
# Unless otherwise stipulated in writing, any and all information contained
# herein regardless in any format shall remain the sole proprietary of
# MStar Semiconductor Inc. and be kept in strict confidence
# ("MStar Confidential Information") by the recipient.
# Any unauthorized act including without limitation unauthorized disclosure,
# copying, use, reproduction, sale, distribution, modification, disassembling,
# reverse engineering and compiling of the contents of MStar Confidential
# Information is unlawful and strictly prohibited. MStar hereby reserves the
# rights to any and all damages, losses, costs and expenses resulting therefrom.
#
################################################################################
# config first
-include .config

BINOUT := bin
TOOLDIR := util
ifeq ($(CONFIG_MSTAR_KAISER), y)
CHIP       ?=kaiser
endif
ifeq ($(CONFIG_MSTAR_KERES), y)
CHIP       ?=keres
endif
ifeq ($(CONFIG_MSTAR_KIRIN), y)
CHIP       ?=kirin
endif
ifeq ($(CONFIG_MSTAR_KRIS), y)
CHIP       ?=kris
endif


PM_BINA	    = $(BINOUT)/pm/pm_$(CHIP).bin
UBOOT_BINA	    = $(BINOUT)/flash_with_uboot.bin
UBOOT_MAP	    = ../../../MBoot/u-boot-2011.06/u-boot.map
CHUNK_HEADER    = $(BINOUT)/chunk_header.bin
UBOOT_ALIGN_BIN = $(BINOUT)/uboot_dummy.bin
SBOOT_BIN       = $(BINOUT)/flash.bin
UBOOT_COMPRESS_BIN = $(BINOUT)/u-boot.compressed.bin
#SECURITY_BIN    = $(BINOUT)/secure_info.bin
#SECURITY_INC    = $(BINOUT)/security.inc
#HASH0_BIN       = secure/hash/$(CHIP_FOLDER)/hash0.bin
#AUT_BIN         = secure/AUT_info.bin
#HASH1_BIN       = $(BINOUT)/hash1.bin
#HASH2_BIN       = $(BINOUT)/hash2.bin

ifeq ($(CONFIG_RESERVED_CHUNK_HEADER),y)
LD_FILE =ld/$(CHIP)/sboot_$(CHIP)_generic_chunk.ld
LD_UBOOTSIZE=$$((($(shell printf '%u' `grep 'LOADADDR(.boot)+' $(LD_FILE) | grep -o '[0-9]*'`)*1024)))
endif

ifeq ($(CONFIG_LOGO_STORE_IN_SPI_FLASH),y)
LOGO_SRC = ../../../MBoot/MstarCustomer/MSTAR/sboot/bin/logo/boot0.jpg
endif

ifeq ($(CONFIG_LOGO_STORE_IN_MBOOT),y)
LOGO_SRC = ../../../MBoot/MstarCustomer/MSTAR/sboot/bin/logo/HB_logo.JPG
endif

ifeq ($(CONFIG_LOGO_STORE_IN_MBOOT_HYBRID),y)
LOGO_SRC = $(CONFIG_LOGO_FILE_PATH_IN_UBOOT)
endif

# That's our default target when none is given on the command line
PHONY := all
all: $(BINOUT)/mboot.bin

define ALIGN
$$((($(1)+$(2)-1)&(~($(2)-1))))
endef

#####################################################################
#######         CREATE CHUNK HEADER INFORMATION START          ######
#####################################################################
##   Chunk Header parameter initialize START ##
UBOOT_ROM_START = 0
UBOOT_RAM_START = 0
UBOOT_RAM_END = 0
UBOOT_ROM_END = 0
UBOOT_RAM_ENTRY = 0
Reserved1 = 0
Reserved2 = 0x00000301
BINARY_ID = 0x0000B007
LOGO_ROM_OFFSET = 0
LOGO_SIZE = 0
SBOOT_ROM_OFFSET = 0
SBOOT_SIZE = 0x10000
SBOOT_RAM_OFFSET = 0
PM_ROM_OFFSET = 0
PM_SIZE = 0x10000
PM_RAM_OFFSET = 0
SECURITY_INFO_LOADER_ROM_OFFSET = 4
SECURITY_INFO_LOADER_SIZE = 0
SECURITY_INFO_LOADER_RAM_OFFSET = 0
CUSTOMER_KEY_BANK_ROM_OFFSET = 0
CUSTOMER_KEY_BANK_SIZE = 0
CUSTOMER_KEY_BANK_RAM_OFFSET =0
## In PM code, "0xFFFFFFFF" is the default value of DDR_BACKUP_TABLE_ROM_OFFSET.
## If this flag is not 0xFFFFFFFF, it will triger the PM code to do something.
DDR_BACKUP_TABLE_ROM_OFFSET = 0xFFFFFFFF
POWER_SEQUENCE_TABLE_ROM_OFFSET = 0
SECURITY_INFO_AP_ROM_OFFSET = 0
SECURITY_INFO_AP_SIZE = 0
UBOOT_ENVIRONMENT_ROM_OFFSET = 2
UBOOT_ENVIRONMENT_SIZE = 0x10000
UBOOT_POOL_ROM_OFFSET = 0
UBOOT_POOL_SIZE = 0
COPROBOOT_ROM_OFFSET = 0
COPROBOOT_SIZE = 0
RT_AEON_ROM_OFFSET = 0
RT_AEON_SIZE = 0
NUTTX_CONFIG_OFFSET = 0
NUTTX_CONFIG_SIZE = 0
MBOOT_CONFIG_BINARY_OFFSET = 0
MBOOT_CONFIG_BINARY_SIZE = 0
RESCURE_ENVIRONMENT_ROM_OFFSET = 0
RESCURE_ENVIRONMENT_SIZE = 0x10000
RESCURE_STATUS_ROM_OFFSET = 0
RESCURE_STATUS_SIZE = 0
MAX_CONFIG_BINARY_SIZE = 0x1000
##   Chunk Header parameter initialize END  ##

UBOOT_SIZE = $(shell ls -Gl $(UBOOT_COMPRESS_BIN) | $(AWK) '{ print $$4 }')

CHUNK_HEADER_SIZE = 1024

ifeq ($(ARCH),arm)
SPI_BASE=0x14000000
RAM_BASE=$(CONFIG_MIU0_BUSADDR)
else ifeq ($(ARCH),mips)
SPI_BASE=0x94000000
RAM_BASE=$(CONFIG_MIU0_BUSADDR)
endif

ifeq ($(CONFIG_ENV_IN_MMC),y)
UBOOT_ENVIRONMENT_ROM_OFFSET = 256
endif

ifeq ($(CONFIG_BOOTING_FROM_EXT_SPI_WITH_PM51),y)
CUSTOMER_KEY_BANK_SIZE              = 0x10000
endif

MBOOT_ALIGNMENT_SIZE = 0x10000
ifeq ($(CONFIG_MBOOT_IN_SPI_FLASH),y)
MBOOT_ALIGNMENT_SIZE = 0x10000
else ifeq ($(CONFIG_MBOOT_IN_NAND_FLASH),y)
MBOOT_ALIGNMENT_SIZE = 0x100000
else ifeq ($(CONFIG_MBOOT_IN_MMC_FLASH),y)
MBOOT_ALIGNMENT_SIZE = 0x200
endif

ifeq ($(CONFIG_LDR_MSCOMPRESS), y)
ORI_UBOOT_SIZE = $(shell ls -Gl $(UBOOT_BIN).nocompress | $(AWK) '{ print $$4 }')
else ifeq ($(CONFIG_LDR_LZMA_COMPRESS),y)
ORI_UBOOT_SIZE = $(shell ls -Gl $(UBOOT_BIN).nocompress | $(AWK) '{ print $$4 }')
else
ORI_UBOOT_SIZE = $(UBOOT_SIZE)
endif

UBOOT_ROM_START=$$(($(PM_SIZE)+$(SBOOT_SIZE)+$(CUSTOMER_KEY_BANK_SIZE)+$(CHUNK_HEADER_SIZE)+$(SPI_BASE)))
UBOOT_ROM_END=$$(($(UBOOT_ROM_START)+$(UBOOT_SIZE)))
_UBOOT_RAM_START            = $(shell $(AWK) '$$2 == "other_vector" { print $$1 }' $(UBOOT_MAP))
UBOOT_RAM_ENTRY            = $(shell $(AWK) '$$2 == "_start" { print $$1 }' $(UBOOT_MAP))
UBOOT_RAM_START=$$(($(_UBOOT_RAM_START)+$(RAM_BASE)))
UBOOT_RAM_END=$$(($(_UBOOT_RAM_START)+$(ORI_UBOOT_SIZE)+$(RAM_BASE)))

PM_ROM_OFFSET=$$(((($(UBOOT_ROM_END)+$(SPI_BASE)+0x10000)&(~0xFFFF))-$(SPI_BASE)))


ifeq ($(CONFIG_LOGO_STORE_IN_SPI_FLASH),y)
	LOGO_SIZE=$(shell ls -Gl $(LOGO_SRC) | $(AWK) '{ print $$4 }')
  _LOGO_ROM_OFFSET=$$(($(UBOOT_ROM_END)+$(SECURITY_INFO_LOADER_SIZE)))
    ifeq ($(CONFIG_MBOOT_IN_SPI_FLASH),y)
	LOGO_ROM_OFFSET=$$(($(call ALIGN,$(_LOGO_ROM_OFFSET),$(MBOOT_ALIGNMENT_SIZE)) - $(SPI_BASE)))
    else
	LOGO_ROM_OFFSET=$$(($(call ALIGN,$(_LOGO_ROM_OFFSET),$(MBOOT_ALIGNMENT_SIZE))))
    endif
	UBOOT_POOL_ROM_OFFSET = $$(((($(UBOOT_ROM_END)+$(PM_SIZE))&(~0xFFFF))-$(SPI_BASE)))
endif

ifneq (, $(filter y, $(CONFIG_LOGO_STORE_IN_MBOOT) $(CONFIG_LOGO_STORE_IN_MBOOT_HYBRID)))
        LOGO_SIZE=$(shell ls -Gl $(LOGO_SRC) | $(AWK) '{ print $$4 }')
  _LOGO_ROM_OFFSET=$$(($(UBOOT_ROM_END)+$(SECURITY_INFO_LOADER_SIZE)))
        LOGO_ROM_OFFSET=$$(($(call ALIGN,$(_LOGO_ROM_OFFSET),$(MBOOT_ALIGNMENT_SIZE)) - $(SPI_BASE)))
	UBOOT_POOL_ROM_OFFSET = $$(($(PM_ROM_OFFSET)+$(PM_SIZE)+$(CHUNK_HEADER_SIZE)))
endif


ifeq ($(CONFIG_R2_BRINGUP),y)
ifeq ($(CONFIG_TEE),y)
ifeq ($(CONFIG_NCONFIG_STORE_IN_EMMC_FLASH),y)
	NUTTX_CONFIG_OFFSET = 608
	NUTTX_CONFIG_SIZE = 128
else ifeq ($(CONFIG_NCONFIG_STORE_IN_NAND_FLASH),y)
 	NUTTX_CONFIG_OFFSET = 6
	NUTTX_CONFIG_SIZE = 1
else ifeq ($(CONFIG_NCONFIG_STORE_IN_SPI_FLASH),y)
	NUTTX_CONFIG_OFFSET = 6
	NUTTX_CONFIG_SIZE = 1
endif
endif
endif
    
$(CHUNK_HEADER):
	$(Q)echo "  GEN     $@"
	$(Q)printf "== CHUNK HEADER INFO ==\n"
	$(Q)printf "UBOOT_ROM_START=0x%x\n" $(UBOOT_ROM_START)
	$(Q)printf "UBOOT_RAM_START=0x%x\n" $(UBOOT_RAM_START)
	$(Q)printf "UBOOT_RAM_END=0x%x\n" $(UBOOT_RAM_END)
	$(Q)printf "UBOOT_ROM_END=0x%x\n" $(UBOOT_ROM_END)
	$(Q)printf "UBOOT_RAM_ENTRY=0x%x\n" $(UBOOT_RAM_ENTRY)
	$(Q)printf "Reserved1=0x%x\n" $(Reserved1)
	$(Q)printf "Reserved2=0x%x\n" $(Reserved2)
	$(Q)printf "BINARY_ID=0x%x\n" $(BINARY_ID)
	$(Q)printf "LOGO_ROM_OFFSET=0x%x\n" $(LOGO_ROM_OFFSET)
	$(Q)printf "LOGO_SIZE=0x%x\n" $(LOGO_SIZE)
	$(Q)printf "SBOOT_ROM_OFFSET=0x%x\n" $(SBOOT_ROM_OFFSET)
	$(Q)printf "SBOOT_SIZE=0x%x\n" $(SBOOT_SIZE)
	$(Q)printf "SBOOT_RAM_OFFSET=0x%x\n" $(SBOOT_RAM_OFFSET)
	$(Q)printf "PM_ROM_OFFSET=0x%x\n" $(PM_ROM_OFFSET)
	$(Q)printf "PM_SIZE=0x%x\n" $(PM_SIZE)
	$(Q)printf "PM_RAM_OFFSET=0x%x\n" $(PM_RAM_OFFSET)
	$(Q)printf "SECURITY_INFO_LOADER_ROM_OFFSET=0x%x\n" $(SECURITY_INFO_LOADER_ROM_OFFSET)
	$(Q)printf "SECURITY_INFO_LOADER_SIZE=0x%x\n" $(SECURITY_INFO_LOADER_SIZE)
	$(Q)printf "SECURITY_INFO_LOADER_RAM_OFFSET=0x%x\n" $(SECURITY_INFO_LOADER_RAM_OFFSET)
	$(Q)printf "CUSTOMER_KEY_BANK_ROM_OFFSET=0x%x\n" $(CUSTOMER_KEY_BANK_ROM_OFFSET)
	$(Q)printf "CUSTOMER_KEY_BANK_SIZE=0x%x\n" $(CUSTOMER_KEY_BANK_SIZE)
	$(Q)printf "CUSTOMER_KEY_BANK_RAM_OFFSET=0x%x\n" $(CUSTOMER_KEY_BANK_RAM_OFFSET)
	$(Q)printf "DDR_BACKUP_TABLE_ROM_OFFSET=0x%x\n" $(DDR_BACKUP_TABLE_ROM_OFFSET)
	$(Q)printf "POWER_SEQUENCE_TABLE_ROM_OFFSET=0x%x\n" $(POWER_SEQUENCE_TABLE_ROM_OFFSET)
	$(Q)printf "SECURITY_INFO_AP_ROM_OFFSET=0x%x\n" $(SECURITY_INFO_AP_ROM_OFFSET)
	$(Q)printf "SECURITY_INFO_AP_SIZE=0x%x\n" $(SECURITY_INFO_AP_SIZE)
	$(Q)printf "UBOOT_ENVIRONMENT_ROM_OFFSET=0x%x\n" $(UBOOT_ENVIRONMENT_ROM_OFFSET)
	$(Q)printf "UBOOT_ENVIRONMENT_SIZE=0x%x\n" $(UBOOT_ENVIRONMENT_SIZE)
	$(Q)printf "UBOOT_POOL_ROM_OFFSET=0x%x\n" $(UBOOT_POOL_ROM_OFFSET)
	$(Q)printf "UBOOT_POOL_SIZE=0x%x\n" $(UBOOT_POOL_SIZE)
	$(Q)printf "COPROBOOT_ROM_OFFSET=0x%x\n" $(COPROBOOT_ROM_OFFSET)
	$(Q)printf "COPROBOOT_SIZE=0x%x\n" $(COPROBOOT_SIZE)
	$(Q)printf "RUNTIMEAEON_ROM_OFFSET=0x%x\n" $(RT_AEON_ROM_OFFSET)
	$(Q)printf "RUNTIMEAEON_SIZE=0x%x\n" $(RT_AEON_SIZE)
	$(Q)printf "NUTTX_CONFIG_OFFSET=0x%x\n" $(NUTTX_CONFIG_OFFSET)
	$(Q)printf "NUTTX_CONFIG_SIZE=0x%x\n" $(NUTTX_CONFIG_SIZE)
	$(Q)printf "MBOOT_CONFIG_BINARY_OFFSET=0x%x\n" $(MBOOT_CONFIG_BINARY_OFFSET)
	$(Q)printf "MBOOT_CONFIG_BINARY_SIZE=0x%x\n" $(MBOOT_CONFIG_BINARY_SIZE)
	$(Q)printf "RESCURE_ENVIRONMENT_ROM_OFFSET=0x%x\n" $(RESCURE_ENVIRONMENT_ROM_OFFSET)
	$(Q)printf "RESCURE_ENVIRONMENT_SIZE=0x%x\n" $(RESCURE_ENVIRONMENT_SIZE)
	$(Q)printf "RESCURE_STATUS_ROM_OFFSET=0x%x\n" $(RESCURE_STATUS_ROM_OFFSET)
	$(Q)printf "RESCURE_STATUS_SIZE=0x%x\n" $(RESCURE_STATUS_SIZE)

	$(Q)$(TOOLDIR)/create_chunk_header.exe $@ $(CHUNK_HEADER_SIZE)\
               $(UBOOT_ROM_START) $(UBOOT_RAM_START) $(UBOOT_RAM_END) $(UBOOT_ROM_END) \
               $(UBOOT_RAM_ENTRY) $(Reserved1) $(Reserved2) $(BINARY_ID) \
			   $(LOGO_ROM_OFFSET) $(LOGO_SIZE) $(SBOOT_ROM_OFFSET) $(SBOOT_SIZE) \
			   $(SBOOT_RAM_OFFSET) $(PM_ROM_OFFSET) $(PM_SIZE)	$(PM_RAM_OFFSET) \
			   $(SECURITY_INFO_LOADER_ROM_OFFSET) $(SECURITY_INFO_LOADER_SIZE) $(SECURITY_INFO_LOADER_RAM_OFFSET) $(CUSTOMER_KEY_BANK_ROM_OFFSET)\
			   $(CUSTOMER_KEY_BANK_SIZE) $(CUSTOMER_KEY_BANK_RAM_OFFSET) $(SECURITY_INFO_AP_ROM_OFFSET) $(SECURITY_INFO_AP_SIZE)  \
			   $(UBOOT_ENVIRONMENT_ROM_OFFSET) $(UBOOT_ENVIRONMENT_SIZE) $(DDR_BACKUP_TABLE_ROM_OFFSET) $(POWER_SEQUENCE_TABLE_ROM_OFFSET) \
			   $(UBOOT_POOL_ROM_OFFSET) $(UBOOT_POOL_SIZE) $(COPROBOOT_ROM_OFFSET) $(COPROBOOT_SIZE) \
			   $(RT_AEON_ROM_OFFSET) $(RT_AEON_SIZE) $(NUTTX_CONFIG_OFFSET) $(NUTTX_CONFIG_SIZE) \
			   $(MBOOT_CONFIG_BINARY_OFFSET) $(MBOOT_CONFIG_BINARY_SIZE) $(RESCURE_ENVIRONMENT_ROM_OFFSET) $(RESCURE_ENVIRONMENT_SIZE) \
			   $(RESCURE_STATUS_ROM_OFFSET) $(RESCURE_STATUS_SIZE)

#######           CREATE  CHUNK HEADER INFORMATION END              ######


$(BINOUT)/mboot.bin: $(CHUNK_HEADER)
	$(Q)echo "  MERGE   $@"
	$(Q)dd if=bin/flash_with_uboot.bin of=suffix.bin bs=1 skip=$(LD_UBOOTSIZE);
	$(Q)dd if=bin/flash_with_uboot.bin of=$@ bs=1 skip=0 count=65536;
	$(Q)cat $(PM_BINA) >> $@;
	$(Q)cat $(CHUNK_HEADER)>> $@;
	$(Q)cat suffix.bin >> $@;
	$(Q)rm suffix.bin;
ifeq ($(CONFIG_LOGO_STORE_IN_SPI_FLASH),y)
	$(Q)./$(TOOLDIR)/align $@ $(MBOOT_ALIGNMENT_SIZE);
	$(Q)cat $(LOGO_SRC) >> $@;
endif

ifneq (, $(filter y, $(CONFIG_LOGO_STORE_IN_MBOOT) $(CONFIG_LOGO_STORE_IN_MBOOT_HYBRID)))
	$(Q)./$(TOOLDIR)/align $@ $(MBOOT_ALIGNMENT_SIZE);
	$(Q)cat $(LOGO_SRC) >> $@;
endif

binaclean:
	@rm -f $(BINOUT)/chunk_header.bin
	@rm -f $(BINOUT)/mboot.bin


